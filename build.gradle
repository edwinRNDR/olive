plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
}

sourceCompatibility = 1.8

group 'org.openrndr'
version '1.0-SNAPSHOT'

ext {
    openrndrVersion = "0.3.33-rc2"
    orxVersion = "0.0.23"
    kotlinVersion = "1.3.30"
}
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://dl.bintray.com/openrndr/openrndr"
    }
    maven { url 'https://jitpack.io' }
}

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.openrndrOS = "windows"
        break
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.openrndrOS = "linux-x64"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.openrndrOS = "macos"
        break
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable"
    compile "org.jetbrains.kotlin:kotlin-compiler-embeddable"

    compile "org.jetbrains.kotlin:kotlin-script-runtime"
    compile "org.jetbrains.kotlin:kotlin-script-util"
    runtime "org.jetbrains.kotlin:kotlin-scripting-compiler"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    runtime "org.openrndr:openrndr-gl3:$openrndrVersion"
    runtime "org.openrndr:openrndr-gl3-natives-$openrndrOS:$openrndrVersion"
    compile "org.openrndr:openrndr-core:$openrndrVersion"
    compile "org.openrndr:openrndr-svg:$openrndrVersion"
    compile "org.openrndr:openrndr-animatable:$openrndrVersion"
    compile "org.openrndr:openrndr-extensions:$openrndrVersion"
    compile "org.openrndr:openrndr-filter:$openrndrVersion"
    compile 'com.github.openrndr.orx:orx-file-watcher:v0.0.23'
}

ext.mainClassName = "olive.OliveKt"
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', '**/module-info*'
}

